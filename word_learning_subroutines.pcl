# This PCL script contains all subroutines (aka functions)

#######
# Checks if all sound files exist
#######
sub
	bool all_sound_files_exist
begin
	loop int index = 1 until index > SOUND_FILES.count() begin
		if(!file_exists(stimulus_directory + SOUND_DIR + SOUND_FILES[index])) then
			term.print_line("Could not find the file: " + SOUND_FILES[index]);
		end;
		index = index+1;
	end;
	return true;
end;

sub
	bool blank_image_trial(int i_trial)
begin
	string filename = IMAGE_FILES[i_trial];
	return filename.count() == 0 || filename == "BLANK" || filename == "empty" || filename == "EMPTY" || filename == "blank"
end;

#######
# Checks if all image files exist
#######
sub
	bool all_image_files_exist
begin
	loop int index = 1 until index > IMAGE_FILES.count() begin
		if(!blank_image_trial(index) && !file_exists(stimulus_directory + IMAGE_DIR + IMAGE_FILES[index])) then
			term.print_line("Could not find the file: " + IMAGE_FILES[index]);
		end;
		index = index+1;
	end;
	return true;
end;


#######
# Checks if all video files exist
#######
sub
	bool all_movie_files_exist
begin
	loop int index = 1 until index > MOVIES.count() begin
		if(!file_exists(MOVIES[index].filename())) then
			term.print_line("Could not find the file: " + MOVIES[index].filename());
		end;
		index = index+1;
	end;
	return true;
end;

sub
	setup_movies
begin
	loop int index = 1 until index > MOVIE_LIST_FILENAMES.count() begin
		video movie = new video;
		movie.set_filename(MOVIE_DIR + MOVIE_LIST_FILENAMES[index]);
		MOVIES.add(movie);
		index = index+1;
	end;
end;

#######
# Displays text on the display section
#######
sub
   display( string message , int wait)
begin
   display_window.erase();
   display_window.draw_text( message );
	wait_interval(wait);
end;

#######
# Skips a line on the file
#######
sub
	skip_header(input_file& file)
begin
	file.set_delimiter( '\n' );
	file.get_line();
	file.set_delimiter( '\t' );
end;

#######
# Counts the number of lines in a file by opening it and transversing it until the last line
#######
sub
	int get_number_of_lines_in_file(string filename)
begin
	int number_of_lines = 0;
	input_file file = new input_file;
	
	file.set_delimiter( '\n' );
	file.open(filename);
	file.get_line(); # skipping header
	loop until file.end_of_file() begin
		file.get_line();
		if (!file.last_succeeded()) then
			file.close();
			exit("file reading failed, some error on line" + string(number_of_lines+1)); # Plus one because of the header.
		end;
		number_of_lines = number_of_lines + 1;
	end;
	
	file.close();
	return number_of_lines;
end;

#######
# Reads a line bit by bit and puts the parsed results into the correct arrays.
#######
sub
	parse_full_line(input_file& file, int index)
begin
	UNIQUE_IDENTITIES.add(file.get_int());
	BLOCKS.add(file.get_int());
	GROUP_IDENTITIES.add(file.get_int());
	IMAGE_FILES.add(file.get_string());
	
	array <int> timewindow[2][2];
	timewindow[1][1] = file.get_int();
	timewindow[1][2] = file.get_int();
	timewindow[2][1] = file.get_int();
	timewindow[2][2] = file.get_int();
	IMAGE_TIME_WINDOWS.add(timewindow);
	
	SOUND_FILES.add(file.get_string());
	ONSET_TRIGGERS.add(file.get_int());
end;

#######
# opens the stimulus file which is stored in STIMULUS_LIST_FILENAME
#######
sub
	open_stimulus_data_file
begin
	string stimulus_file= stimulus_directory + TRIAL_LIST_FILENAME;

	term.print_line("Opening: " + stimulus_file + " ...");

	int number_of_trials = get_number_of_lines_in_file(stimulus_file);
	
	term.print_line("Detected " + string(number_of_trials) + " lines (excluding header)...");

	input_file in = new input_file;
	in.set_delimiter( '\t' );
	in.open(stimulus_file);

	term.print_line("Scanning them now ...");
	
	skip_header(in);
	# Now read in the actual trail info from the file
	loop int index = 1 until index > number_of_trials begin 
		parse_full_line(in, index); 
		index = index + 1;
	end;

	in.close();

	if (in.end_of_file()) then
		term.print_line("Succes! Reached end of the file; closed file.")
	else
		term.print_line("FAIL! HORROR! Encountered an error; closed file.")
	end;	
end;

#######
# Sets main trial to show blank
#######
sub
	set_blank_main_trial(int i_trial)
begin
	
	array<int> time_window[2][2] = IMAGE_TIME_WINDOWS[i_trial];
	int duration_1 = time_window[1][2]-time_window[1][1];
	int duration_2 = time_window[2][2]-time_window[2][1];
	
	# Set values for first picture
	picevent1.set_stimulus(default);
	picevent1.set_event_code("Empty Picture");
	picevent1.set_time(time_window[1][1]);
	picevent1.set_duration(duration_1);
	
	# Set values conditionally for second picture
	if (duration_2 > 0 && time_window[1][2] < time_window[2][1]) then # things are correctly set so set up the second time window
		picevent2.set_stimulus(default);
		picevent2.set_event_code("Empty Picture");
		picevent2.set_time(time_window[2][1]);
		picevent2.set_duration(duration_2);
	else
		picevent2.set_time(time_window[1][2]+50);
		picevent2.set_stimulus(default);
		picevent2.set_event_code("Empty Picture");
		picevent2.set_duration(0);
		if ( time_window[2][1] != 0 ) then
			term.print_line("Something went wrong with the time windows on trial " + string(i_trial));
		end;
	end;
	
	
	
	
end;

#######
# Sets main trial with optional blink
#######
sub
	set_main_trial_with_optional_blink(int i_trial)
begin
	# Do loading of the picture.
	bit.set_filename(IMAGE_DIR + IMAGE_FILES[i_trial]);
	bit.load();
	
	array<int> time_window[2][2] = IMAGE_TIME_WINDOWS[i_trial];
	int duration_1 = time_window[1][2]-time_window[1][1];
	int duration_2 = time_window[2][2]-time_window[2][1];
	
	picevent1.set_stimulus(pic1);
	picevent1.set_event_code (IMAGE_FILES[i_trial]);
	picevent1.set_time(time_window[1][1]);
	picevent1.set_duration(duration_1);
	
	if (duration_2 > 0 && time_window[1][2] < time_window[2][1]) then # things are correctly set so set up the second time window
		picevent2.set_stimulus(pic1);
		picevent2.set_event_code(IMAGE_FILES[i_trial]);
		picevent2.set_time(time_window[2][1]);
		picevent2.set_duration(duration_2);
	else # things are NOT correctly set up the second time window
		picevent2.set_time(time_window[1][1]+50);
		picevent2.set_stimulus(empty);
		picevent2.set_event_code("Empty Picture");
		picevent2.set_duration(0);
		if ( time_window[2][1] != 0 ) then
			term.print_line("Something went wrong with the time windows on trial " + string(i_trial));
		end;
	end;
end;

#######
# Counts the different number of sets/groups
#######
sub
	int number_of_groups
begin
	int group_count = 0;
	int last_group = 0;
	
	loop int index = 1 until index > GROUP_IDENTITIES.count() begin 
		if ( last_group != GROUP_IDENTITIES[index] ) then
			group_count = group_count + 1;
			last_group = GROUP_IDENTITIES[index];
		end;
		index = index + 1;
	end;
	
	return group_count;
end;

#######
# Counts the different number of sets/groups
#######
sub
	int get_start_group_of_block(int block_nr)
begin
	int group_count = 0;
	int last_group = 0;
	
	loop int index = 1 until index > GROUP_IDENTITIES.count() begin 
		if ( last_group != GROUP_IDENTITIES[index] ) then
			group_count = group_count + 1;
			last_group = GROUP_IDENTITIES[index];
			if ( block_nr == BLOCKS[index] ) then
				return group_count;
			end;
		end;
		index = index + 1;
	end;
	
	return group_count;
end;

#######
# Generate the trial order (random)
#######
sub
	generate_trial_order(array<int>& TRIAL_ORDER[0])
begin
	# place holder for group
	array<int> group_order[number_of_groups()];
	int start_index_test_group = get_start_group_of_block(2);

	# Fill up the training phase
	group_order.fill(1, start_index_test_group-1, 1, 3);
	int first_index_of_test_phase = group_order[start_index_test_group-1] + 3;
	if (TRAINING_PHASE_RANDOMISATION) then
		group_order.shuffle(1, start_index_test_group-1);
	end;
	

	# Fill up the test phase
	group_order.fill(start_index_test_group, group_order.count(), first_index_of_test_phase , 1);
	if (TEST_PHASE_RANDOMISATION) then
		group_order.shuffle(start_index_test_group, group_order.count());
	end;
	
	loop
		int index 	= 1;
	until
	  index > group_order.count()
	begin 
		if ( group_order[index] < first_index_of_test_phase ) then
			TRIAL_ORDER.add(group_order[index]);
			TRIAL_ORDER.add(group_order[index]+1);
			TRIAL_ORDER.add(group_order[index]+2);
		else
			TRIAL_ORDER.add(group_order[index]);
		end;

		index = index + 1;
	end;
end;

#######
# Generate the trial order (random)
#######
sub
	bool item_in_int_array(int item, array<int>& group[0])
begin
	loop
		int index 	= 1;
	until
	  index > group.count()
	begin 
		if ( group[index] == item) then
			return true;
		end;

		index = index + 1;
	end;
	return false;
end;
